import execa from "execa"
import { resolve } from "path"
import { bin_name, log } from ".."
import { BUILD_TARGETS } from "../constants"
import { dispatch } from "../dispatch"
import Docker from 'dockerode';
import { readFileSync, writeFileSync } from "fs"

export const build = async (os: string) => {
    if(!BUILD_TARGETS.includes(os)) return log.error(`Unrecognised build target "${os}".\nWe only currently support ${JSON.stringify(BUILD_TARGETS)}.`)

    log.info("Applying mozconfig...")
    const commonConfig = readFileSync(resolve(process.cwd(), "configs", "common", "mozconfig"), "utf-8");
    const osConfig = readFileSync(resolve(process.cwd(), "configs", os, "mozconfig"), "utf-8");
    const mergedConfig = `# This file is automatically generated. Do not edit!\n\n${commonConfig}\n\n${osConfig}`;

    writeFileSync(
        resolve(process.cwd(), "src", "mozconfig"),
        mergedConfig
    )

    log.info(`Config for this \`${os}\` build:`)

    mergedConfig.split("\n").map(ln => {
        if(ln.startsWith("mk") || ln.startsWith("ac")) log.info(`\t${ln.split("add_options ")[1]}`)
    })

    const dockerfile = `configs/${os}/${os}.dockerfile`
    const image_name = `db-${os}-build`

    log.info(`Building Dockerfile for "${os}"...`)
    await dispatch("docker", ["build", `configs/${os}`, "-f", dockerfile, "-t", image_name])

    const docker = new Docker();

    const container = await docker.createContainer({ 
        Image: image_name,
        Tty: true,
        Volumes: {
            "/worker": {},
            "/worker/build": {}
        },
        HostConfig: {
            Binds: [
                `${resolve(process.cwd(), "src")}:/worker/build`,
                `${resolve(process.cwd())}:/worker`
            ],
        }
    });

    container.attach({ stream: true, stdin: true, stdout: true, stderr: true }, (e, out) => {
        if(out) out.pipe(process.stdout);
    })

    await container.start()
    await container.wait()
}